#include <cassert>
#include <cstdio>
#include <cstdint>
#include <fstream>
#include <vector>
#include <variant>
#include <string>

using Choices = std::vector<std::string>;

class Option {
    Choices choices;
    std::string value;

public:
    std::string name;

    Option(std::string name, Choices choices) : choices(choices), name(name) {
        if(choices.size() != 0)
            value = choices[0];
    }   

    bool ask_set() {
        printf("%s\n", name.c_str());
    
        for(size_t i = 0; i < choices.size(); ++i) {
            printf("\t(%zu) %s\n", i, choices[i].c_str());
        }   

        printf("[0..%zu]: ", choices.size() - 1); 
        int num = getchar() - '0';

        if(size_t(num) < choices.size()) {
            value = choices[num];

            return true;
        }   
        else {
            return false;
        }   
    }

    void dump() const {
        printf("%s: %s\n", name.c_str(), value.c_str());
    }

    std::string get() const {
        return value;
    }
};

using Settings = std::vector<Option>;

Settings build_settings_defaults = {
    {"TARGET_PLATFORM", {"unix", "dos"}},
    {"DEBUG_BUILD", {"false", "true"}},
};

namespace io {
    void input_flush()
    {
        int c;
        while((c = getchar()) != '\n' && c != EOF) {}
    }
}

std::string generate_make_fragment(Settings settings)
{
    const char *header = "# autogenerated by mkbuildconf\n";
    std::string output;

    output.append(header);

    for(const auto &option : settings) {
        output.append("\n");
        output.append(option.name);
        output.append(" ?= ");
        
        output.append(option.get());
    }

    output.append("\n");
    output.append("include $(ENGINE_DIR)/makefiles/$(TARGET_PLATFORM)-platform.mk");

    return output;
}

void ask_settings(Settings &settings)
{
    puts("Configure Settings...");

    for(auto &option : settings) {
        printf("\n");
        bool answered = false;
        while(!answered) {
            answered = option.ask_set();
            io::input_flush();
        }
        io::input_flush();
    }

    printf("\n");
}

void dump_settings(const Settings &settings)
{
    for(auto &option : settings) {
        option.dump();
    }
}

void usage()
{
    static const char *help = "mkbuildconf [output path]";
    printf("\n%s\n", help);
}

int main(int argc, char **argv)
{
    if(argc != 2) {
        fprintf(stderr, "Wrong number of arguments\n");
        usage();

        return 1;
    }

    Settings build_settings = build_settings_defaults;

    puts("\n\n\n*****************************");
    ask_settings(build_settings);
    dump_settings(build_settings);
    puts("*****************************\n\n");

    std::string make_fragment = generate_make_fragment(build_settings);

    std::ofstream file(argv[1]);
    file << make_fragment;
    file.close();

    return 0;
}
